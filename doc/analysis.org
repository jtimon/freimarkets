
* Introduction

  The present document contains the specifications of a protocol for
p2p trade of cryptography secured tokens that can represent arbitrary
assets such as complementary currencies to enable inter-trade between
them.

This protocol supports tokens that only exist in certain databases
and also tokens that exist publicly in a p2p accounting network such
as Bitcoin. That network protocol has to be extended to be compatible
with this protocol. FreiMarkets is an extension of the Freicoin
protocol to support this protocol.

* Definitions

- *Asset*: a crypto-token type representing a certain type of
  property.

- *Transitive transaction*: an atomic transaction involving more
  than two assets. This is similar to Ryan Fugger's Ripple concept.
  Transitive transactions can involve an arbitrary number of assets,
  allowing the payer to use a different currency than the one the
  recipient will receive. This allows economic agents without a
  direct trust relationship to interact with each other.

- *The payer*: the initiator of a transitive transaction, no matter
  if it is a payment or trade.

- *Crypto-chain*: the data structure that contains the information of
  a p2p accounting network (for example, Freicoin's blockchain).

- *Public asset*: an asset that exists in a crypto-chain.

- *Private asset*: an asset that exists in a private server. There's
  no technical reason why a given server couldn't publish all its
  balances, the term is just chosen to differentiate from the assets
  in crypto-chains that have to be necessarily public.

- *Commit*: the process by which a transaction becomes irrevocably
  valid and all the movements of asset are atomically executed. 
  
  The protocol must support different commit methods and be
  extendable in that respect. The main commit methods are
  crypto-chain commit and registry commit. All transactions involving
  public assets have to use the crypto-chain commit method. In fact,
  transactions involving only public assets don't need to do anything
  special for the commit, just be valid when they get into the chain.

- *Holder*: a user that owns certain quantity of a given asset.

- *Issuer*: the entity responsible for a given asset. Only the
  issuer can create new units of a given asset and it is also
  responsible for the real world backing of the asset if it has any.

- *Accountant*: a server responsible for the accounting of a given
  asset. It has to maintain a database of the balances and prevent
  the double-spending of the tokens, thus its signature is required
  for every transaction involving an asset it accounts for. For this
  reason accountants are supposed to be always online. Issuers and
  holders can run their own accounting servers.

  Since the crypto-chain does the accounting and double-spending
  prevention on its own, public assets don't have any accountant.

- *Order*: a binding offer to to exchange certain quantity
  of an asset for another asset at given price or rate. They're
  signed by the holder of the asset being sold.

  Depending on the nature of the assets being traded, orders can be
  public, private or mixed. Orders offering a private asset for a
  public one are considered private, only orders that give a public
  asset in exchange of private assets are considered mixed.

  Transactions including public and/or mixed orders must be committed
  using the crypto-chain commit method because they involve public
  assets.

- *Promise*: an asset transfer or order signed by all the necessary
  parties. Its validity depends on the commit of the full transaction
  by a registry or a crypto-chain.

  They contain the hash of a commit secret and a commit expiry. The
  expiry timestamp for registry commits. In the case of crypto-chain
  commits, the public part of the transaction must contain the expiry
  time in its own format (for example, in the case of Freicoin the
  expiry time would be expressed as a block number).

- *Registry*: a server providing a timestamping service to ensure
  atomicity in non-trivial transactions (involving more than one
  asset) that aren't committed using a crypto-chain. Any transaction
  involving public assets must be committed using its crypto-chain and
  therefore doesn't need a registry.

  The registry doesn't have to know anything about the transaction
  itself apart from the commit secret. It publishes just publishes a
  pair with the commit secret and a timestamp. It doesn't even know
  whether the transaction ended up being valid or it expired.

- *Registry commit method*: when all assets in the transaction are
  private, the registry commit method can be used. 

  After collecting the necessary orders, the payer initiates the
  transaction by specifying a registry (this may need previous
  negotiation between the payer and the accountants), creating a
  random commit secret and distributing its hash and an expiry
  timestamp to the different accountants. The payer also sends the
  amount to be filled from each order and the destination address to
  each accountant, which signs the order appending all the information
  received. Once signed by the accountants, the orders constitute
  "promises".

  Note that orders can contain two assets located in different
  accounting servers. In this case both accountants must sign a
  promise to give it to the other one.
  
  The payer signs his simple payment promise first, then the receiver
  signs her order's promise, then the next one, etc.

  Once everything is signed, the payer sends the commit secret to the
  specified registry, which signs the secret appending a timestamp
  with the current time. Anyone can query the register for a specified
  secret hash and the register will answer the with the secret and the
  timestamp or a message indicating that the secret has not been
  processed yet. Note that is not enough to have the secret processed
  by a registry, the registry's timestamp must be lower than the
  commit expiry timestamp.

  The promises and the proof from the register constitute together
  the proof of payment. The accountants store these proofs to give
  them to the holders and issuers.

- *Transaction commit secret*: a new optional field for chain
  transactions. The scripts on the inputs can contain a new script
  operator OP_SECRET_HASHES_TO <secret_hash>. If the parameter
  <secret_hash> on any of the occurrences of this operator in the
  transaction is not equal to the hash of this field, the transaction
  as a whole is invalid.

- *Sub-transaction*: is the data structure that represents a public
  order. They have inputs and outputs that can be denominated in
  different assets.
  
- *Private output*: it is a special type of output only allowed for
  sub-transactions that doesn't get into the UTXO but sets more
  conditions for the sub-transaction to be included in a valid
  transaction. The signer of the sub-transaction fills the following
  fields: private asset id, amount, destination address, accountant
  address. When the payer is creating a transaction involving private
  assets, he must connect with all the accountants specified in
  private outputs and give them the hash of the commit secret. Each
  accountant appends this hash to the sub-transaction as well as an
  expiry block height and then signs it. 

- *Crypto-chain commit method*: when there's public and private assets
  in a transaction, the chain commit method must be used. If all the
  assets are private, a public asset can be used paying a fee to use
  this commit method.

  After collecting the necessary orders, the payer initiates the
  transaction, creating a random commit secret and distributing its
  hash and an expiry block height to the different accountants. The
  payer also sends the amount to be filled from each order and the
  destination address to each accountant, which signs the order
  appending all the information received. This is similar to the
  registry commit process with the only difference that no registry
  has to be specified here. Once signed by the accountants, the
  private and mixed orders constitute "promises".

  Here again the signing order goes from the payer to the last
  accountant, skipping completely public orders and payments since
  they have no accountant.

  Once everything is signed, the payer completes the public
  transaction with the commit secret and broadcasts it to the
  crypto-chain network. If the transaction gets into the chain (it has
  to be before the commit expiry), all promises are valid, otherwise
  all are considered canceled.

- **: 

- **: 

- **: 

- **: 

- **: 

- **: 

* Messages

  The following message types define the protocol. Although this
  document uses JSON nomenclature to define the messages, the
  protocol itself could use another data serialization format.

** Private asset definition

#+BEGIN_SRC json
"asset_definition": {
    "issuer": "(hash of the issuer's public key)",
    "accountant": "(optional, hash of the accountant's public key)",
    "interest_rate": "(interest rate, may be negative)",
    "interest_step": "(time in seconds)",
    "unit": "(optional, value unit)",
    "contract": "(optional, private contract associated with the asset)"
}
#+END_SRC

   If the accountant field is left empty, the issuer himself
   acts like an accountant for the asset.

   Each interest_step in seconds, interest_rate is applied.

   The private contract may be a legal contract or something that
   enables more automatic features like a ricardian contract.

** Order

** Trade promise

** Transfer promise

** 

* Examples
** 
* Sequences
