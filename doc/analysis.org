
* Introduction

  The present document contains the specifications of a protocol for
p2p trade of cryptography secured tokens that can represent arbitrary
assets such as complementary currencies to enable inter-trade between
them.

This protocol supports tokens that only exist in certain databases
and also tokens that exist publicly in a p2p accounting network such
as Bitcoin. That network protocol has to be extended to be compatible
with this protocol. FreiMarkets is an extension of the Freicoin
protocol to support this protocol.

* Definitions

- *Asset*: a crypto-token type representing a certain type of
  property.

- *Transitive transaction*: an atomic transaction involving more
  than two assets. This is similar to Ryan Fugger's Ripple concept.
  Transitive transactions can involve an arbitrary number of assets,
  allowing the payer to use a different currency than the one the
  recipient will receive. This allows economic agents without a
  direct trust relationship to interact with each other.

- *The payer*: the initiator of a transitive transaction, no matter
  if it is a payment or trade.

- *Crypto-chain*: the data structure that contains the information of
  a p2p accounting network (for example, Freicoin's blockchain).

- *Public asset*: an asset that exists in a crypto-chain.

- *Private asset*: an asset that exists in a private server. There's
  no technical reason why a given server couldn't publish all its
  balances, the term is just chosen to differentiate from the assets
  in crypto-chains that have to be necessarily public.

- *Commit*: the process by which a transaction becomes irrevocably
  valid and all the movements of asset are atomically executed. 
  
  The protocol must support different commit methods and be
  extendable in that respect. The main commit methods are
  crypto-chain commit and registry commit. All transactions involving
  public assets have to use the crypto-chain commit method. In fact,
  transactions involving only public assets don't need to do anything
  special for the commit, just be valid when they get into the chain.

- *Holder*: a user that owns certain quantity of a given asset.

- *Issuer*: the entity responsible for a given asset. Only the
  issuer can create new units of a given asset and it is also
  responsible for the real world backing of the asset if it has any.

- *Accountant*: a server responsible for the accounting of a given
  asset. It has to maintain a database of the balances and prevent
  the double-spending of the tokens, thus its signature is required
  for every transaction involving an asset it accounts for. For this
  reason accountants are supposed to be always online. Issuers and
  holders can run their own accounting servers.

  Since the crypto-chain does the accounting and double-spending
  prevention on its own, public assets don't have any accountant.

- *Authority*: a server that verifies and signs all attempted
  transactions, orders and promises involving a given asset. They are
  optional for both public and private assets.
  
  They can limit, for example, which addresses can hold the asset to
  a set of authorized accounts defined by the issuer or the Authority itself.
  Certain assets need an authority to comply with money transmission
  regulations or to enable a higher level o transparency using only
  verified addresses that belong to known parties. They can maintain
  a full provable log of all transactions involving the asset.

  For public assets they are also necessary to enforce transfer fees
  to the authority or the issuer.

  Although it would be reasonable to assume that they will be always
  online, they can sign transactions and orders in advance, being the
  accountant the only actor that always needs to sign at transaction
  processing time.

  An issuer can act as its own Authority. 

- *Order*: a binding offer to to exchange certain quantity
  of an asset for another asset at given price or rate. They're
  signed by the holder and the authority of the asset being sold.

  Depending on the nature of the assets being traded, orders can be
  public, private or mixed. Orders offering a private asset for a
  public one are considered private, only orders that give a public
  asset in exchange of private assets are considered mixed.

  Transactions including public and/or mixed orders must be committed
  using the crypto-chain commit method because they involve public
  assets.

- *Promise*: an asset transfer or order signed by all the necessary
  parties. Its validity depends on the commit of the full transaction
  by a registry or a crypto-chain.

  They contain the hash of a commit secret and a commit expiry. The
  expiry timestamp for registry commits. In the case of crypto-chain
  commits, the public part of the transaction must contain the expiry
  time in its own format (for example, in the case of Freicoin the
  expiry time would be expressed as a block number).

- *Registry*: a server providing a timestamping service to ensure
  atomicity in non-trivial transactions (involving more than one
  asset) that aren't committed using a crypto-chain. Any transaction
  involving public assets must be committed using its crypto-chain and
  therefore doesn't need a registry.

  The registry doesn't have to know anything about the transaction
  itself apart from the commit secret. It publishes just publishes a
  pair with the commit secret and a timestamp. It doesn't even know
  whether the transaction ended up being valid or it expired.

- *Registry commit method*: when all assets in the transaction are
  private, the registry commit method can be used. 

  After collecting the necessary orders, the payer initiates the
  transaction by specifying a registry (this may need previous
  negotiation between the payer and the accountants), creating a
  random commit secret and distributing its hash and an expiry
  timestamp to the different accountants. The payer also sends the
  amount to be filled from each order and the destination address to
  each accountant, which signs the order appending all the information
  received. Once signed by the accountants, the orders constitute
  "promises".

  Note that orders can contain two assets located in different
  accounting servers. In this case both accountants must sign a
  promise to give it to the other one.
  
  The payer signs his simple payment promise first, then the receiver
  signs her order's promise, then the next one, etc.

  Once everything is signed, the payer sends the commit secret to the
  specified registry, which signs the secret appending a timestamp
  with the current time. Anyone can query the register for a specified
  secret hash and the register will answer the with the secret and the
  timestamp or a message indicating that the secret has not been
  processed yet. Note that is not enough to have the secret processed
  by a registry, the registry's timestamp must be lower than the
  commit expiry timestamp.

  The promises and the proof from the register constitute together
  the proof of payment. The accountants store these proofs to give
  them to the holders, issuers and authorities.

- *Transaction commit secret*: a new optional field for chain
  transactions. The scripts on the inputs can contain a new script
  operator OP_SECRET_HASHES_TO <secret_hash>. If the parameter
  <secret_hash> on any of the occurrences of this operator in the
  transaction is not equal to the hash of this field, the transaction
  as a whole is invalid.

- *Sub-transaction*: is the data structure that represents a public
  order. They have inputs and outputs that can be denominated in
  different assets.
  
- *Private output*: it is a special type of output only allowed for
  sub-transactions that doesn't get into the UTXO but sets more
  conditions for the sub-transaction to be included in a valid
  transaction. The signer of the sub-transaction fills the following
  fields: private asset id, amount, destination address, accountant
  address. When the payer is creating a transaction involving private
  assets, he must connect with all the accountants specified in
  private outputs and give them the hash of the commit secret. Each
  accountant appends this hash to the sub-transaction as well as an
  expiry block height and then signs it. 

- *Crypto-chain commit method*: when there's public and private assets
  in a transaction, the chain commit method must be used. If all the
  assets are private, a public asset can be used paying a fee to use
  this commit method.

  After collecting the necessary orders, the payer initiates the
  transaction, creating a random commit secret and distributing its
  hash and an expiry block height to the different accountants. The
  payer also sends the amount to be filled from each order and the
  destination address to each accountant, which signs the order
  appending all the information received. This is similar to the
  registry commit process with the only difference that no registry
  has to be specified here. Once signed by the accountants, the
  private and mixed orders constitute "promises".

  Here again the signing order goes from the payer to the last
  accountant, skipping completely public orders and payments since
  they have no accountant.

  Once everything is signed, the payer completes the public
  transaction with the commit secret and broadcasts it to the
  crypto-chain network. If the transaction gets into the chain (it has
  to be before the commit expiry), all promises are valid, otherwise
  all are considered canceled.

- **: 

- **: 

- **: 

- **: 

- **: 

- **: 

* Messages

  The following message types define the protocol. Although this
  document uses JSON nomenclature to define the messages, the
  protocol itself could use another data serialization format.

** Private asset definition

#+BEGIN_SRC json
"asset_definition": {
    "issuer": "(hash of the issuer's public key)",
    "accountant": "(optional, hash of the accountant's public key)",
    "authority": "(optional, hash of the authority's public key)", 
    "interest_rate": "(interest rate, may be negative)",
    "interest_step": "(time in seconds)",
    "unit": "(optional, value unit)",
    "contract": "(optional, private contract associated with the asset)"
}
#+END_SRC

   If the accountant field is left empty, the issuer himself
   acts like an accountant for the asset.

   If the authority is left empty, it is assumed that no authority
   validating the transfers. If the issuer wants to act as its own
   authority he must specify his own address again in this field.
 
   Each interest_step in seconds, interest_rate is applied.

   The private contract may be a legal contract or something that
   enables more automatic features like a ricardian contract.

** Order

** Trade promise

** Transfer promise

** 

* Examples

** Simple trade with a public for private order

1) Bob signs and broadcast a subtransaction "I give up to 100 frc for
   100 privateC which Carol is the accountant for" and goes off-line.
   The sub-tx is not valid yet, it requires Carol's signature.

2) Two days later, Alice says, hey, I own 50 privateC on Carol's
   server and I want 50 of those frc. She contacts Carol referring to
   Bob's order.

   Alice sends a private promise to Carol, staying "I pay 50 privateC
   from my account to Bob's if a transaction mathing this
   <secret_hash> gets into the block before Exp".

3) Carol's signs Bob's sub-tx AND <secret_hash> AND her signature is
   conditional to the sub-tx getting in the chain before Exp. 

4) Alice creates the public tx using Bob's now complete sub-tx,
   including secret and broadcasts it. 

5.a) If Height > Exp the transaction is invalid

5.b) If the tx gets into the chain before Exp:
  - Alice's promise is valid and Carol owns it
  - Bob has also the private output published in the chain "... for
    100 privateC which Carol is the accountant for" with Carol's
    signature published in the chain.

So when Bob comes back online he can know and prove what he owns.

* Sequences
* Everything with Bitcoin scripts
** Private buy with public funds
Seller constructs private order:
in: 100 privB
out: 100 FRC:pubA to seller1
validation scriptPubKey: 
    OP_DELEGATION_SEPARATOR OP_DUP OP_HASH160 <accountantB_pkh> OP_EQUALVERIFY OP_CHECKSIGVERIFY_DEL
    OP_FROMALTSTACK (expiry) OP_FROMALTSTACK (amount) seller1 pubA FRC_CHAIN_ID OP_OUTPUT_EXISTS_BEFORE

and signs the partial transaction. 

The validation script starts with OP_DELEGATION_SEPARATOR, which is simply ignored by the script interpreter, but marks the part of the validation script that needs to be signed by the owners of the inputs in the transaction or sub-transaction, the rest 
Note that there's some data being fetch from the stack, that data must be set by accountantB or the script will return false if it's not in the stack. Whoever appears in OP_CHECKSIGVERIFY_DEL (in this case accountantB) must sign the full transaction with the complete validation script that can be valid, including what's after OP_DELEGATION_SEPARATOR.

Note also that he output refers to an external asset (FRC:pubA) accountantB has no control over. It is ignored for validation purposes and is only used to specify the exchange rate. If the accountant cheats the user with the exchange rate, there will be a proof of fraud.

The payer (who just wants 50 privB) completes the private transaction with:
in: -
out: 50 privB to buyer1

The buyer also creates the public transaction:

in: 50 pubA
out: 50 pubA to seller1
expiry: 10000

but doesn't sign it. It sends both complete but not signed transactions to the accountant who reads them and completes the private validation scriptPubKey with:

50 OP_TOALTSTACK 10000 OP_TOALTSTACK

Finally accountantB signs it all and fills the sub-tx validation scriptSig with:

<accountantB_sig> <accountantB_pk>

If you put the full script ordered together to validate by the script interpreter you have:

<accountantB_sig> <accountantB_pk>
50 OP_TOALTSTACK 10000 OP_TOALTSTACK
OP_DELEGATION_SEPARATOR OP_DUP OP_HASH160 <accountantB_pkh> OP_EQUALVERIFY OP_CHECKSIGVERIFY_DEL
OP_FROMALTSTACK OP_FROMALTSTACK seller1 pubA FRC_CHAIN_ID OP_OUTPUT_EXISTS_BEFORE

Operations in the stack shouldn't be allowed in the validation scriptSig for this to be secure.

Now if buyer1 signs the public transaction and it gets into the FRC chain before height 10000, the private transaction will be valid. Until that happens or height 10000 is reached the transaction is considered to be in process and after height 10000 without appearance of the public one, the private transaction is invalid. 

** Buying public assets with private assets

The seller constructs the public order:
in: 100 pubB
out: 100 accountantA:privA to seller1
validation scriptPubKey: 
    OP_DELEGATION_SEPARATOR OP_DUP OP_HASH160 <accountantA_pkh> OP_EQUALVERIFY OP_CHECKSIGVERIFY_DEL

and signs the partial transaction. 

The payer (who just wants 50 pubB) completes the public transaction with:
in: -
out: 50 pubB to buyer1
expiry: 10000

The buyer also creates the private transaction:

in: 50 privA
out: 50 privA to seller1
validation scriptPubKey: 
    10000 50 buyer1 pubB FRC_CHAIN_ID OP_OUTPUT_EXISTS_BEFORE

The buyer signs the private transaction and sends it with the public one to accountantA.
The public transaction only lacks accountantA's signature to be valid. If the public transaction gets into the chain before 10000 the private one is also valid, otherwise is rolled back.

** Hybrid Transitive transaction

pubA -> pubB -> privC -> privD -> pubE -> userA
So the payer (userA) will pay pubA and receive pubE in exchange. PrivCs and privDs are managed by accountants accC and accD respectively.

Opened offers:

1) Fully public:

in: 100 pubB
out: 100 pubA to userB

2) Private for Public:

in: 100 privC
out: 100 FRC:pubB to userC
validation scriptPubKey: 
    OP_DELEGATION_SEPARATOR OP_DUP OP_HASH160 <accountantC_pkh> OP_EQUALVERIFY OP_CHECKSIGVERIFY_DEL
    OP_FROMALTSTACK (expiry) OP_FROMALTSTACK (amount) userC pubB FRC_CHAIN_ID OP_OUTPUT_EXISTS_BEFORE

3) Private for private:

in: 100 privD
out: 100 accC:privC to userD
validation scriptPubKey: 
    OP_DELEGATION_SEPARATOR OP_DUP OP_HASH160 <accountantC_pkh> OP_EQUALVERIFY OP_CHECKSIGVERIFY_DEL
    OP_DUP OP_HASH160 <accountantD_pkh> OP_EQUALVERIFY OP_CHECKSIGVERIFY_DEL

4) Public for private:

in: 100 pubE
out: 100 accD:privD to userE
validation scriptPubKey: 
    OP_DELEGATION_SEPARATOR OP_DUP OP_HASH160 <accountantD_pkh> OP_EQUALVERIFY OP_CHECKSIGVERIFY_DEL

The payer (userA) who wants to buy 50 pubE for 50 pubA builds the public transaction (pub_tx) using offers 1 and 4:

in:  50 pubA
out: 50 pubB to userC
     50 pubE to userA
expiry: 10000

Since 50 pubB from offer 1 are used to pay C, 50 pubA must go to userB, and those are funded by userA in the inputs so sub-tx 1 is complete and valid.
But offer 4 still requires accD to sign the full transaction.
UserA still hasn't provided the scriptSig to access those 50 pubA in the inputs neither.

Two private transactions need to be created:

Using offer 2, the payer also builds transaction priv_tx_1:
in: -
out: 50 privC to userD

The validation scriptPubKey for 2 must be completed pushing 50 as the amount and 10000 as the expiry into the stack. The validity of offer 2 and thus this whole transaction still depends on accC's signature.

The other private transaction (priv_tx_2) is built using offer 3:
in: -
out: 50 privD to userE
validation scriptPubKey:
    10000 50 userC pubB FRC_CHAIN_ID OP_OUTPUT_EXISTS_BEFORE

Offer 3 doesn't require any completion for its validation scriptPubKey, but the corresponding scriptSig requires the signatures of both accC and accD.

Now that all transactions are complete, it's time to sign.

First accC signs priv_tx_1 and shares with userA and accD. This is secure because priv_tx_1 still depends 50 pubB being sent to userC.

UserD is secure because priv_tx_2 in which he gives privD will only be valid if priv_tx_1 is valid too, that is, if 50 pubB are sent to userC before expiry as the validation scriptPubKey of priv_tx_2 requires.
So accC and accD can sign offer 3 in any order to make priv_tx_2 almost valid.

Now accD signs pub_tx to make offer 4 valid.
Only userA's signature for the 50 pubA input is missing.
The payer (userA) signs the full transaction and broadcasts. If it gets into the block before expiry, all transactions are valid, otherwise all of them are invalid.

At any point, accC, accD or even userA right before the end could stop signing and forwarding the transactions, but that would only cause all transaction to expire.

